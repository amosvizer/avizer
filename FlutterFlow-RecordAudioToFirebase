// Automatic FlutterFlow imports
import '/backend/backend.dart';
import '/backend/schema/structs/index.dart';
import '/actions/actions.dart' as action_blocks;
import '/flutter_flow/flutter_flow_theme.dart';
import '/flutter_flow/flutter_flow_util.dart';
import '/custom_code/widgets/index.dart'; // Imports other custom widgets
import '/custom_code/actions/index.dart'; // Imports custom actions
import '/flutter_flow/custom_functions.dart'; // Imports custom functions
import 'package:flutter/material.dart';
// Begin custom widget code
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import '../../auth/firebase_auth/auth_util.dart';
import '../../backend/firebase_storage/storage.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:typed_data';
import 'package:record/record.dart';
import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';

class RecordAudioToFirebaseRO extends StatefulWidget {
  const RecordAudioToFirebaseRO({
    Key? key,
    this.width,
    this.height,
    this.buttonWidth = 80,
    this.buttonHeight = 80,
    this.iconSize = 45,
  }) : super(key: key);

  final double? width;
  final double? height;
  final double buttonWidth;
  final double buttonHeight;
  final double iconSize;

  @override
  _RecordAudioToFirebaseROState createState() =>
      _RecordAudioToFirebaseROState();
}

class _RecordAudioToFirebaseROState extends State<RecordAudioToFirebaseRO> {
  bool _isRecording = false;
  int _recordDuration = 0;
  String? path = '';
  String? downloadUrl; // Added a new variable to store the download URL
  Timer? _timer;
  Timer? _ampTimer;
  final _audioRecorder = Record();

  Amplitude? _amplitude;
  // Add the ValueNotifier here as an instance variable of the state
  ValueNotifier<String?> downloadUrlNotifier = ValueNotifier<String?>(null);

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
  }

  void dispose() {
    downloadUrlNotifier.dispose();
    _timer?.cancel();
    _ampTimer?.cancel();
    _audioRecorder.dispose();
    super.dispose();
  }

  Future<String> getRecordingPath() async {
    final Directory appDocumentsDir = await getApplicationDocumentsDirectory();
    final String recordingPath = '${appDocumentsDir.path}/tempRecording.m4a';
    // Check if the file already exists
    final existingFile = File(recordingPath);
    if (existingFile.existsSync()) {
      // If the file exists, delete it
      existingFile.deleteSync();
    }
    return recordingPath;
  }

  Future<Uint8List?> getUint8ListFromLocalPath(String? localPath) async {
    if (localPath == null || localPath.isEmpty) {
      return null;
    }
    try {
      final file = File(localPath);
      return await file.readAsBytes();
    } catch (e) {
      print('Error reading file: $e');
      return null;
    }
  }

  Future<void> _start() async {
    if (await _audioRecorder.hasPermission()) {
      final String customPath = await getRecordingPath();
      await _audioRecorder.start(path: customPath, encoder: AudioEncoder.aacLc
          //, bitRate: 32000
          //, sampleRate: 16000
          );
      setState(() {
        _isRecording = true;
        _recordDuration = 0;
      });
      _startTimer();
    } else {
      _showPermissionMissingDialog();
    }
  }

  void _showPermissionMissingDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Missing Permission'),
          content: Text(
              'Unable to record audio. Please grant recording permission.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Close'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _stop() async {
    _timer?.cancel();
    _ampTimer?.cancel();
    path = await _audioRecorder.stop();
    setState(() => _isRecording = false);

    FFAppState().filePath =
        path ?? ''; //will remove this once the widget state is working
    Uint8List? bytes = await getUint8ListFromLocalPath(path);
    if (bytes != null) {
      // Get the current date and time
      final now = DateTime.now();
      // Format the date and time as a string
      final formattedDateTime =
          '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}_${now.hour.toString().padLeft(2, '0')}-${now.minute.toString().padLeft(2, '0')}-${now.second.toString().padLeft(2, '0')}';

      // Set the file name to the formatted date and time string together with the file extension
      final fileName = '$formattedDateTime.m4a';

      // Set the directory where you want to store the file (e.g., a folder named 'files' in your storage)
      String directoryPath = '/users/' + currentUserUid + '/audio-recordings';

      print('setting path');
      // Combine the directory path and file name to create the full storage path
      final storagePath = '$directoryPath/$fileName';
      print(storagePath);
      // Save the file to Firebase storage
      downloadUrl = await uploadData(storagePath, bytes);
      downloadUrlNotifier.value = downloadUrl;

      print(downloadUrl);
      FFAppState().update(() {
        FFAppState().filePath = downloadUrl ?? '';
        FFAppState().RecordedAudioPath = downloadUrl ?? '';
        // Check if audioFilesList is null. If it is, initialize it as an empty list.
        if (FFAppState().RecordedAudioFIles == null) {
          FFAppState().RecordedAudioFIles = [];
        }

        // Remove the temporary file after uploading to Firebase
        final tempFile = File(path!);
        if (tempFile.existsSync()) {
          tempFile.deleteSync();
        }

        // Add the new downloadUrl to the audioFilesList.
        // Ensure downloadUrl is not null before adding it to the list.
        if (downloadUrl != null) {
          FFAppState().RecordedAudioFIles.add(downloadUrl!);
        }
      });
    } else {
      print('Failed to read the recorded audio file');
    }
  }

  Widget _buildRecorder() {
    return Center(
      child: InkWell(
        onTap: _isRecording ? _stop : _start,
        child: Container(
          width: widget.buttonWidth,
          height: widget.buttonHeight,
          decoration: BoxDecoration(
            color: _isRecording
                ? Color(0x4DD9376E)
                : FlutterFlowTheme.of(context).alternate,
            shape: BoxShape.circle,
          ),
          child: Icon(
            _isRecording ? Icons.stop_rounded : Icons.mic_none,
            color: FlutterFlowTheme.of(context).primaryText,
            size: widget.iconSize,
          ),
        ),
      ),
    );
  }

  void _startTimer() {
    _timer?.cancel();
    _ampTimer?.cancel();

    _timer = Timer.periodic(const Duration(seconds: 1), (Timer t) {
      setState(() => _recordDuration++);
    });

    _ampTimer =
        Timer.periodic(const Duration(milliseconds: 200), (Timer t) async {
      _amplitude = await _audioRecorder.getAmplitude();
      setState(() {});
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: FlutterFlowTheme.of(context).primaryBackground,
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [_buildRecorder()],
      ),
    );
  }
}
